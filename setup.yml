---
- name: Set up Arch Linux system
  hosts: localhost

  vars:
    dotfiles_dir: "{{ lookup('env', 'HOME')}}/.dotfiles"
    pacman_packages:
      cli:
        # Development tools
        - git
        - python
        - python-pip
        - zsh

        # Utils
        - stow
        - unzip
        - yamllint

  tasks:
    - name: Update pacman cache
      tags: [pacman]
      become: true
      pacman:
        update_cache: true

    - name: Install CLI packages
      tags: [pacman]
      become: true
      pacman:
        name: "{{ pacman_packages.cli }}"
        state: present

    - name: Clone yay AUR repository
      tags: [yay]
      git:
        repo: https://aur.archlinux.org/yay.git
        dest: /home/{{ ansible_user_id }}/yay
        clone: yes
        update: no
      when: not (ansible_user_id == 'root')

    - name: Build and install yay
      tags: [yay]
      shell: makepkg -si --noconfirm
      args:
        chdir: /home/{{ ansible_user_id }}/yay
      when: not (ansible_user_id == 'root')

    - name: Clean up yay build directory
      tags: [yay]
      file:
        path: /home/{{ ansible_user_id }}/yay
        state: absent
      when: not (ansible_user_id == 'root')

    - name: Stow dotfiles
      tags: [stow]
      ansible.builtin.shell:
        chdir: "{{ dotfiles_dir  }}"
        cmd: "stow --verbose {{ item }}"
      register: stow_out
      changed_when: 'stow_out.stderr is search("LINK: ")'
      with_items:
        - git
        - shell_common
        - zsh

    - name: Download and install Nerd Font
      tags: [font]
      vars:
        font_version: "v3.4.0"
        fonts_dir: "{{ lookup('env', 'HOME') }}/.local/share/fonts"
      block:
        - name: Check if fonts are installed
          ansible.builtin.stat:
            path: "{{ fonts_dir }}/JetBrainsMonoNerdFont-Regular.ttf"
          register: font_result

        - name: Create fonts directory
          ansible.builtin.file:
            path: "{{ fonts_dir }}"
            state: directory
          when: not font_result.stat.exists

        - name: Download fonts
          ansible.builtin.unarchive:
            src: "https://github.com/ryanoasis/nerd-fonts/releases/download/{{ font_version }}/JetBrainsMono.zip"
            dest: "{{ fonts_dir }}"
            remote_src: yes
          when: not font_result.stat.exists

        - name: Rebuild font cache
          ansible.builtin.command: fc-cache -fv
          when: not font_result.stat.exists

    - name: Install Oh My Zsh and plugins
      tags: [zsh]
      vars:
        oh_my_zsh_dir: "{{ lookup('env', 'HOME') }}/.oh-my-zsh"
        zsh_plugins:
          - name: zsh-autosuggestions
            repo: https://github.com/zsh-users/zsh-autosuggestions.git
          - name: zsh-syntax-highlighting
            repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
      block:
        - name: Check if Oh My Zsh is installed
          ansible.builtin.stat:
            path: "{{ oh_my_zsh_dir }}"
          register: oh_my_zsh_stat
          changed_when: false

        - name: Create temporary directory for installation
          ansible.builtin.tempfile:
            state: directory
            suffix: ohmyzsh
          register: oh_my_zsh_tmp
          when: not oh_my_zsh_stat.stat.exists

        - name: Download Oh My Zsh installer
          ansible.builtin.get_url:
            url: "https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh"
            dest: "{{ oh_my_zsh_tmp.path }}/install.sh"
          when: not oh_my_zsh_stat.stat.exists

        - name: Run Oh My Zsh installer
          ansible.builtin.shell: "/bin/sh {{ oh_my_zsh_tmp.path }}/install.sh --unattended --keep-zshrc"
          args:
            creates: "{{ oh_my_zsh_dir }}"
          when: not oh_my_zsh_stat.stat.exists

        - name: Clean up temporary installer directory
          ansible.builtin.file:
            path: "{{ oh_my_zsh_tmp.path }}"
            state: absent
          when: not oh_my_zsh_stat.stat.exists

        - name: Install Zsh plugins
          ansible.builtin.git:
            repo: "{{ item.repo }}"
            dest: "{{ oh_my_zsh_dir }}/custom/plugins/{{ item.name }}"
            depth: 1
          loop: "{{ zsh_plugins }}"

    - name: Change default shell to zsh
      tags: [zsh]
      become: true
      user:
        name: "{{ lookup('env', 'USER') }}"
        shell: /usr/bin/zsh
      when: ansible_env.SHELL != "/usr/bin/zsh"
